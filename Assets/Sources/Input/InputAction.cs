//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Sources/Input/InputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Sources.Input
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAction"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""b0607366-f51a-4607-9e7a-3b42487aa796"",
            ""actions"": [
                {
                    ""name"": ""Tracktion"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8b2646b2-0efa-46e7-9e95-7809948e956b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TracktionDeltaX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""79dbea36-b5d2-4828-958b-c249fdc0bf1c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65d63a36-8b31-4b67-b319-30e9d41044c6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracktion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac79e64d-1c59-4e94-b511-ec99aa815b4f"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracktion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7784ccf9-c827-4ce3-83e0-056445b52984"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TracktionDeltaX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_Tracktion = m_Touch.FindAction("Tracktion", throwIfNotFound: true);
            m_Touch_TracktionDeltaX = m_Touch.FindAction("TracktionDeltaX", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_Tracktion;
        private readonly InputAction m_Touch_TracktionDeltaX;
        public struct TouchActions
        {
            private @PlayerInput m_Wrapper;
            public TouchActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Tracktion => m_Wrapper.m_Touch_Tracktion;
            public InputAction @TracktionDeltaX => m_Wrapper.m_Touch_TracktionDeltaX;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @Tracktion.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTracktion;
                    @Tracktion.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTracktion;
                    @Tracktion.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTracktion;
                    @TracktionDeltaX.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTracktionDeltaX;
                    @TracktionDeltaX.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTracktionDeltaX;
                    @TracktionDeltaX.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTracktionDeltaX;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Tracktion.started += instance.OnTracktion;
                    @Tracktion.performed += instance.OnTracktion;
                    @Tracktion.canceled += instance.OnTracktion;
                    @TracktionDeltaX.started += instance.OnTracktionDeltaX;
                    @TracktionDeltaX.performed += instance.OnTracktionDeltaX;
                    @TracktionDeltaX.canceled += instance.OnTracktionDeltaX;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        public interface ITouchActions
        {
            void OnTracktion(InputAction.CallbackContext context);
            void OnTracktionDeltaX(InputAction.CallbackContext context);
        }
    }
}
